name: PR Quality Checks

on:
  pull_request:
    branches:
      - develop
      - 'release-v*'
    types: [opened, edited, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: read

jobs:
  branch-policy:
    name: Enforce branch & PR title policy
    runs-on: ubuntu-latest
    steps:
      - name: Validate naming conventions
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const headRef = pr.head.ref;
            const title = pr.title || '';

            const allowedTypes = ['feat','fix','bugfix','hotfix','chore','docs','refactor','perf','test','build','ci','style','revert'];
            const branchPattern = new RegExp(`^(?:${allowedTypes.join('|')})\/\\d+$`, 'i');
            const releasePleaseBranch = headRef.startsWith('release-please--');
            const releaseBranch = headRef.startsWith('release-v');

            if (!releasePleaseBranch && !releaseBranch && !branchPattern.test(headRef)) {
              core.setFailed(`Branch "${headRef}" must follow type/issue-number (e.g. feat/123). Allowed types: ${allowedTypes.join(', ')}.`);
              return;
            }

            const titlePattern = new RegExp(`^(?:${allowedTypes.join('|')})(?:\\([^)]+\\))?!?:\\s.+\\s\\(#\\d+\\)$`, 'i');
            if (!releasePleaseBranch && !titlePattern.test(title)) {
              core.setFailed('PR title must follow "type: summary (#123)" and use an allowed type.');
              return;
            }

            core.notice('Branch and title follow the conventions.');

  lint-commits:
    name: Lint commits
    needs: branch-policy
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.head_ref, 'release-please--') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: lint commits
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: commitlint.config.js

  build-test:
    name: Format, build & test
    needs: branch-policy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ clang-format-14

      - name: Check formatting
        env:
          CLANG_FORMAT: clang-format-14
        run: |
          set -euo pipefail
          if ! command -v "$CLANG_FORMAT" >/dev/null 2>&1; then
            echo "clang-format not found" >&2
            exit 1
          fi
          mapfile -t files < <(find src tests -type f \( -name '*.c' -o -name '*.cpp' -o -name '*.h' -o -name '*.hpp' \))
          if [ "${#files[@]}" -eq 0 ]; then
            echo "No C/C++ files to format."
            exit 0
          fi
          echo "Checking formatting for ${#files[@]} files"
          printf '%s\0' "${files[@]}" | xargs -0 "$CLANG_FORMAT" -style=file --dry-run --Werror

      - name: Configure CMake (Release)
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --parallel

      - name: Run unit tests
        run: ctest --test-dir build --output-on-failure
