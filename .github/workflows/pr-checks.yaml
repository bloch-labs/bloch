name: PR Checks

on:
  pull_request:
    branches: [develop, release-v*, master]
    types: [opened, edited, synchronize, reopened]

permissions:
  pull-requests: write
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Lint commits
        uses: wagoid/commitlint-github-action@v6
        with:
          configFile: commitlint.config.cjs

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ clang-format-14 gcovr

      - name: Check formatting
        run: |
          set -euo pipefail
          CLANG_FORMAT=clang-format-14
          "$CLANG_FORMAT" --version
          # Use -print0 + xargs -0 to handle spaces and large file sets
          FILES=$(find . -regex '.*\.\(cpp\|hpp\|c\|h\)')
          if [ -n "$FILES" ]; then
            echo "Checking formatting for files:"
            echo "$FILES"
            if ! find . -regex '.*\.\(cpp\|hpp\|c\|h\)' -print0 \
              | xargs -0 -r "$CLANG_FORMAT" -style=file -n --Werror; then
              echo ""
              echo "❌ Code is not formatted correctly."
              echo "👉 Please run: clang-format-14 -i \$(find . -regex '.*\.\(cpp\|hpp\|c\|h\)')"
              echo ""
              exit 1
            else
              echo "✅ Formatting looks good!"
            fi
          else
            echo "No C/C++ source files found."
          fi

      - name: Configure CMake (coverage)
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DBLOCH_ENABLE_COVERAGE=ON

      - name: Build
        run: cmake --build build --config Debug

      - name: Run tests
        run: ctest --test-dir build -C Debug --output-on-failure

      - name: Enforce coverage ≥ 90%
        working-directory: build
        run: |
          set -euo pipefail
          gcovr --root .. \
                --print-summary \
                --exclude 'tests/' \
                --fail-under-line 90

  release-build:
    if: github.event.pull_request.base.ref == 'master'
    runs-on: ${{ matrix.os }}
    needs: build-and-test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-latest]

    steps:
      - name: Checkout (with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake clang-format-14

      - name: Verify formatting
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          CLANG_FORMAT=$(command -v clang-format-14 || command -v clang-format)
          if [ -z "$CLANG_FORMAT" ]; then
            echo "clang-format not found" >&2
            exit 1
          fi
          find . -regex '.*\\.\(cpp\|hpp\|c\|h\)' -print0 \
            | xargs -0 -r "$CLANG_FORMAT" -style=file -n --Werror

      - name: Configure CMake (Release)
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build (Release)
        run: cmake --build build --config Release --parallel

      - name: Run unit tests (Release)
        run: ctest --test-dir build -C Release --output-on-failure

      - name: Dry-run package build
        run: |
          set -euo pipefail
          cmake --build build --config Release --target package --parallel
