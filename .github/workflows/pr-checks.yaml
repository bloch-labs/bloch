name: PR Checks

on:
  pull_request:
    branches: [develop, release-v*]
    types: [opened, edited, synchronize, reopened]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---------- PR title ----------
      - name: Enforce PR title format and link issue
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const title = pr.title || '';

            const types = ['feat','fix','bugfix','chore','docs','refactor','perf','test','build','ci'];
            const typeGroup = types.join('|');
            const re = new RegExp(`^(${typeGroup}):\\s.+\\s\\(#(\\d+)\\)$`,'i');
            const m = title.match(re);
            if (!m) {
              core.setFailed(
                `PR title must match: "type: description (#123)". Allowed: ${types.join(', ')}.`
              );
              return;
            }
            const issueNum = m[2];
            const body = pr.body || '';
            if (!body.includes(`Closes #${issueNum}`)) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                body: (body + `\n\nCloses #${issueNum}\n`).trim()
              });
            }
            core.notice(`Title OK. Linked to issue #${issueNum}.`);

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ clang-format-14

      - name: Check formatting
        run: |
          set -euo pipefail
          CLANG_FORMAT=clang-format-14
          "$CLANG_FORMAT" --version
          # Use -print0 + xargs -0 to handle spaces and large file sets
          FILES=$(find . -regex '.*\.\(cpp\|hpp\|c\|h\)')
          if [ -n "$FILES" ]; then
            echo "Checking formatting for files:"
            echo "$FILES"
            if ! find . -regex '.*\.\(cpp\|hpp\|c\|h\)' -print0 \
              | xargs -0 -r "$CLANG_FORMAT" -style=file -n --Werror; then
              echo ""
              echo "‚ùå Code is not formatted correctly."
              echo "üëâ Please run: clang-format-14 -i \$(find . -regex '.*\.\(cpp\|hpp\|c\|h\)')"
              echo ""
              exit 1
            else
              echo "‚úÖ Formatting looks good!"
            fi
          else
            echo "No C/C++ source files found."
          fi

      - name: Configure CMake
        run: cmake -S . -B build

      - name: Build
        run: cmake --build build

      - name: Run tests
        run: ctest --test-dir build --output-on-failure
