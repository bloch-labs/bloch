name: Release Checks

on:
  pull_request:
    branches:
      - master
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: read

jobs:
  dry-run-release:
    if: startsWith(github.head_ref, 'release-v')
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ github.head_ref }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++

      - name: Derive version from branch name
        id: version
        run: |
          set -euo pipefail
          branch="$BRANCH_NAME"
          version="${branch#release-v}"
          if [[ -z "$version" || "$version" == "$branch" ]]; then
            echo "Unable to extract version from branch name $branch" >&2
            exit 1
          fi
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "Parsed version $version"

      - name: Configure (Release)
        env:
          BLOCH_VERSION: ${{ steps.version.outputs.version }}
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --parallel

      - name: Run unit tests
        run: ctest --test-dir build --output-on-failure

      - name: Dry-run package with CPack
        env:
          BLOCH_VERSION: ${{ steps.version.outputs.version }}
        run: |
          set -euo pipefail
          cmake --build build --target package
          ls -R build | head -n 40
