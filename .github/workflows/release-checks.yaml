name: Release Checks

on:
  pull_request:
    branches: [master]
    types: [opened, edited, synchronize, reopened]

permissions:
  pull-requests: write
  contents: read

jobs:
  release-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-latest]

    steps:
      - name: Checkout (with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake clang-format-14

      - name: Verify formatting
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          CLANG_FORMAT=$(command -v clang-format-14 || command -v clang-format)
          if [ -z "$CLANG_FORMAT" ]; then
            echo "clang-format not found" >&2
            exit 1
          fi
          find . -regex '.*\.(cpp|hpp|c|h)' -print0 \
            | xargs -0 -r "$CLANG_FORMAT" -style=file -n --Werror

      - name: Configure CMake (Release)
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build (Release)
        run: cmake --build build --config Release --parallel

      - name: Run unit tests (Release)
        run: ctest --test-dir build -C Release --output-on-failure

      - name: Dry-run package build
        run: |
          set -euo pipefail
          cmake --build build --config Release --target package --parallel
