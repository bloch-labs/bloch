name: Publish Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

permissions:
  contents: write

jobs:
  build:
    name: Build artifacts (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-latest]
    env:
      BLOCH_VERSION: ${{ github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++

      - name: Configure
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --parallel

      - name: Run unit tests
        run: ctest --test-dir build --output-on-failure

      - name: Package artifact
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          BIN="build/bin/bloch"
          if [ ! -f "$BIN" ]; then
            [ -f "build/bloch" ] && BIN="build/bloch" || true
            [ -f "build/Release/bloch" ] && BIN="build/Release/bloch" || true
          fi
          if [ ! -f "$BIN" ]; then
            echo "Unable to find compiled binary" >&2
            ls -R build || true
            exit 1
          fi
          cp "$BIN" dist/bloch
          cp LICENSE dist/ 2>/dev/null || true
          if [ -f scripts/install.sh ]; then
            cp scripts/install.sh dist/install.sh
          fi
          ASSET="bloch-${BLOCH_VERSION}-${RUNNER_OS}-${RUNNER_ARCH}.tar.gz"
          tar -C dist -czf "$ASSET" .
          echo "Packaged $ASSET"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bloch-${{ github.ref_name }}-${{ runner.os }}-${{ runner.arch }}
          path: '*.tar.gz'
          if-no-files-found: error

  publish:
    name: Publish GitHub Release
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Generate checksums
        run: |
          set -euo pipefail
          cd dist
          shopt -s nullglob
          files=(*.tar.gz)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No artifacts found" >&2
            exit 1
          fi
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum "${files[@]}" > checksums.txt
          else
            shasum -a 256 "${files[@]}" > checksums.txt
          fi

      - name: Extract release notes from changelog
        id: notes
        env:
          VERSION: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          python3 scripts/ci/extract_release_notes.py \
            --version "$VERSION" \
            --changelog CHANGELOG.md \
            --output "$GITHUB_OUTPUT" \
            --key body

      - name: Publish release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Bloch ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: ${{ steps.notes.outputs.body }}
          files: |
            dist/*.tar.gz
            dist/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
