name: Update the Changelog on Tag

on:
  push:
    tags:
      - '[0-9]*'

permissions:
  contents: write
  pull-requests: write

jobs:
  promote-unreleased:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Promote [unreleased] section in changelog.md
        run: | 
          VERSION="${GITHUB_REF#refs/tags/}"
          DATE=$(date +"%d/%m/%Y")

          awk -v ver="$VERSION" -v date="$DATE" '
          BEGIN { unreleased = 0 }
          /^## \[Unreleased\]/ {
            print $0
            unreleased = 1
            print ""
            next
          }
          /^## \[/ && unreleased == 1 {
            print "## [" ver "] - " date
            unreleased = 0
          }
          { print }
          ' CHANGELOG.md > NEW_CHANGELOG.md 

          mv NEW_CHANGELOG.md CHANGELOG.md
      - name: Create a branch and push changelog update
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          BRANCH_NAME="update-changelog-$VERSION"

          git checkout -b $BRANCH_NAME
          git add CHANGELOG.md
          git commit -m "chore: update changelog on tag for $VERSION"
          git push origin "$BRANCH_NAME"
      
      - name: Create PR to master
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update changelog on tag for ${{ github.ref_name }}"
          branch: update-changelog-${{ github.ref_name }}
          title: "chore: update changelog on tag for ${{ github.ref_name }}"
          body: "This PR updates the changelog on tag for version ${{ github.ref_name }}"
          base: master
          delete-branch: true
      
      - name: Auto merge PR
        uses: actions/github-script@v7
        with:
          script: | 
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ steps.create_pr.outputs.pull-request-number }}
            });

            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.data.number
              merge_method: "squash"
            });

            console.log(`PR #${pr.data.number} squash-merged into master`);