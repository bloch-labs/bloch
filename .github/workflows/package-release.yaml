name: Package Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Tag to package (e.g., v1.0.0 or v1.0.0-rc.4)"
        required: true
      ref:
        description: "Git ref to check out (defaults to the version tag)"
        required: false

env:
  RELEASE_VERSION: ${{ github.event.inputs.version }}
  RELEASE_REF: ${{ github.event.inputs.ref || github.event.inputs.version }}

permissions:
  contents: write

jobs:
  validate:
    name: Validate inputs
    runs-on: ubuntu-latest
    outputs:
      prerelease: ${{ steps.meta.outputs.prerelease }}
    steps:
      - name: Verify tag/ref exists
        run: |
          REF="${{ env.RELEASE_REF }}"
          if ! git ls-remote --exit-code "https://github.com/${{ github.repository }}" "$REF" >/dev/null; then
            echo "Ref '$REF' not found in repository." >&2
            exit 1
          fi
      - name: Check version format
        run: |
          if [[ ! "${{ env.RELEASE_VERSION }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+)?$ ]]; then
            echo "Version must look like v1.0.0 or v1.0.0-rc.4" >&2
            exit 1
          fi
      - id: meta
        name: Detect prerelease flag
        run: |
          if [[ "${{ env.RELEASE_VERSION }}" == *-rc.* ]]; then
            echo "prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "prerelease=false" >> "$GITHUB_OUTPUT"
          fi

  build-linux:
    name: Build Linux tarball
    needs: validate
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_REF }}
          fetch-depth: 0
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build
      - name: Configure
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
      - name: Build
        run: cmake --build build --config Release
      - name: Package tarball
        run: |
          set -euo pipefail
          mkdir -p dist
          cp build/bin/bloch dist/bloch
          ARCH=$(uname -m)
          case "$ARCH" in
            x86_64|amd64) ARCH="X64" ;;
            arm64|aarch64) ARCH="ARM64" ;;
            *) echo "Unsupported architecture: $ARCH" >&2; exit 1 ;;
          esac
          TAR="bloch-${{ env.RELEASE_VERSION }}-Linux-${ARCH}.tar.gz"
          tar -C dist -czf "$TAR" bloch
          sha256sum "$TAR" > "$TAR.sha256"
          mkdir -p artifacts
          mv "$TAR" "$TAR.sha256" artifacts/
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ env.RELEASE_VERSION }}
          path: artifacts

  build-macos:
    name: Build macOS tarballs
    needs: validate
    strategy:
      matrix:
        runner: [macos-13, macos-14]
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_REF }}
          fetch-depth: 0
      - name: Configure target architecture
        run: |
          if [[ "${{ matrix.runner }}" == "macos-13" ]]; then
            echo "CMAKE_OSX_ARCHITECTURES=x86_64" >> "$GITHUB_ENV"
            echo "BLOCH_ARCH=X64" >> "$GITHUB_ENV"
          else
            echo "CMAKE_OSX_ARCHITECTURES=arm64" >> "$GITHUB_ENV"
            echo "BLOCH_ARCH=ARM64" >> "$GITHUB_ENV"
          fi
      - name: Configure
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
      - name: Build
        run: cmake --build build --config Release
      - name: Package tarball
        run: |
          set -euo pipefail
          mkdir -p dist
          cp build/bin/bloch dist/bloch
          TAR="bloch-${{ env.RELEASE_VERSION }}-macOS-${BLOCH_ARCH}.tar.gz"
          tar -C dist -czf "$TAR" bloch
          shasum -a 256 "$TAR" > "$TAR.sha256"
          mkdir -p artifacts
          mv "$TAR" "$TAR.sha256" artifacts/
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.runner }}-${{ env.RELEASE_VERSION }}
          path: artifacts

  release:
    name: Publish GitHub release
    needs:
      - build-linux
      - build-macos
    runs-on: ubuntu-22.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: staging
      - name: Gather release files
        run: |
          set -euo pipefail
          mkdir -p release
          find staging -type f -name '*.tar.gz' -exec cp {} release/ \;
          find staging -type f -name '*.tar.gz.sha256' -exec cp {} release/ \;
          find staging -type f -name '*.tar.gz.sha256' -exec cat {} + > release/checksums.txt
          sort -u release/checksums.txt -o release/checksums.txt
          ls -1 release
      - name: Create or update release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.RELEASE_VERSION }}
          name: Bloch ${{ env.RELEASE_VERSION }}
          body: "Automated packaging run for ${{ env.RELEASE_VERSION }}"
          prerelease: ${{ needs.validate.outputs.prerelease }}
          artifacts: release/*
          replacesArtifacts: true
          allowUpdates: true
